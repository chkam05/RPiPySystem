; Establishes a Unix socket for communication between supervisord and the supervisorctl tool (CLI client).
; This allows you to control services (supervisorctl status, supervisorctl restart, etc.)
[unix_http_server]
file=/tmp/supervisor.sock

[supervisord]
loglevel=info                   ; debug|info|warn|error|critical
logfile=./logs/supervisord.log  ; the main Supervisor log,
logfile_maxbytes=50MB           ; Automatic rotation
;logfile_backups=5              ; How many copies to keep
pidfile=./logs/supervisord.pid  ; The PID record of the supervisord process,
childlogdir=./logs              ; The directory containing the logs of individual programs.

; Allows remote control of the Supervisor via RPC (e.g. supervisorctl).
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

; Configure the supervisorctl client to use the same socket as supervisord.
[supervisorctl]
serverurl=unix:///tmp/supervisor.sock

; === APPLICATIONS (MODULES) ===
; [program:name]    ; Service name.
; command           ; Determines what to run (usually Python in venv).
; autostart         ; Specifies whether to start automatically when supervisord starts.
; autorestart       ; Determines whether to restart the service if it crashes.
; stopasgroup       ; This option causes all processes in the group to be stopped when the program is stopped (stop or autorestart).
; killasgroup       ; If a process (and its children) do not gracefully terminate on the TERM signal, the Supervisor will force the entire group to terminate with the KILL signal.
; priority          ; Determines the order in which services are started and stopped. By default, all are 999. Lower value, higher priority.
; Logs into files:
; stdout_logfile                ; Specifies the log files that the service prints to standard output (print, logging.info).
; stderr_logfile                ; Specifies the log files that hit standard errors (logging.error, stacktrace).
; stderr_logfile_maxbytes=10MB  ; Automatic rotation
; stderr_logfile_backups=2      ; How many copies to keep
; Output in console
; stdout_logfile=/dev/stdout
; stdout_logfile_maxbytes=0
; environment=PYTHONUNBUFFERED="1"

[program:supervisor_service]
command=%(ENV_VIRTUAL_ENV)s/bin/python -u -m supervisor_service.app
directory=%(here)s
autostart=true
autorestart=unexpected      ; Not True
exitcodes=0                 ; Only 0 is the "expected" output
startsecs=10                ; Process must survive 10 seconds to be considered a successful start
startretries=3              ; After 3 failed attempts -> FATAL
stopasgroup=true
killasgroup=true
priority=100
stdout_logfile=./logs/supervisor_service.out
stdout_logfile_maxbytes=0
stderr_logfile=./logs/supervisor_service.err
stderr_logfile_maxbytes=0
environment=PYTHONUNBUFFERED="1"

[program:auth_service]
command=%(ENV_VIRTUAL_ENV)s/bin/python -u -m auth_service.app
autostart=true
autorestart=true
stdout_logfile=./logs/auth_service.out
stdout_logfile_maxbytes=0
stderr_logfile=./logs/auth_service.err
stderr_logfile_maxbytes=0
environment=PYTHONUNBUFFERED="1"

[program:email_service]
command=%(ENV_VIRTUAL_ENV)s/bin/python -u -m email_service.app
autostart=true
autorestart=true
stdout_logfile=./logs/email_service.out
stdout_logfile_maxbytes=0
stderr_logfile=./logs/email_service.err
stderr_logfile_maxbytes=0
environment=PYTHONUNBUFFERED="1"

[program:info_service]
command=%(ENV_VIRTUAL_ENV)s/bin/python -u -m info_service.app
autostart=true
autorestart=true
stdout_logfile=./logs/info_service.out
stdout_logfile_maxbytes=0
stderr_logfile=./logs/info_service.err
stderr_logfile_maxbytes=0
environment=PYTHONUNBUFFERED="1"

[program:io_service]
command=%(ENV_VIRTUAL_ENV)s/bin/python -u -m io_service.app
autostart=true
autorestart=true
stdout_logfile=./logs/io_service.out
stdout_logfile_maxbytes=0
stderr_logfile=./logs/io_service.err
stderr_logfile_maxbytes=0
environment=PYTHONUNBUFFERED="1"

[program:control_service]
command=%(ENV_VIRTUAL_ENV)s/bin/gunicorn control_site.wsgi:application --chdir %(here)s/control_service --workers 2 --bind 127.0.0.1:8080
autostart=true
autorestart=true
stdout_logfile=./logs/control_service.out
stdout_logfile_maxbytes=0
stderr_logfile=./logs/control_service.err
stderr_logfile_maxbytes=0
environment=PYTHONUNBUFFERED="1",GUNICORN_CMD_ARGS="--access-logfile - --error-logfile - --capture-output --enable-stdio-inheritance"

[group:RaspberryPiSystem]
programs=supervisor_service,auth_service,email_service,info_service,io_service,control_service

; Event listeners (event response logic)
; The eventlistener is a process that listens for Supervisor events.

[eventlistener:event_listener]
command=%(ENV_VIRTUAL_ENV)s/bin/python ./supervisor_service/listeners/event_listener.py
events=PROCESS_STATE, SUPERVISOR_STATE_CHANGE
environment=PYTHONPATH=%(here)s,PYTHONUNBUFFERED="1"
autorestart=true
; Specifies the maximum buffer size (in bytes) in which Supervisor keeps communication data between supervisord and the listener. 
; The default is 64 KB (65536).
buffer_size=1024
stdout_logfile=/dev/null
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0   ; important: turn off rotation, otherwise "Illegal seek"